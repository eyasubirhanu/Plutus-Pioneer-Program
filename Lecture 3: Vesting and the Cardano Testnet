This lecture will also explore the Cardano Testnet
##Script Context
data ScriptContext:- have two constractors
  1)ScriptContextTxInfo :: TxInfo
                 TxInfo constractors :- 
                 A pending transaction. This is the view as seen by validator scripts,
                 so some details are stripped out
                                    txInfoInputs :: [TxInInfo] => Transaction inputs
                                    txInfoOutputs :: [TxOut] => Transaction outputs
                                    txInfoFee :: Value => The fee paid by this transaction.
                                    txInfoMint :: Value => The Value minted by this transaction.
                                    txInfoDCert :: [DCert] => Digests of certificates included in this transaction
                                    txInfoWdrl :: [(StakingCredential, Integer)] => Withdrawals
                                    txInfoValidRange :: POSIXTimeRange => The valid range for the transaction.
                                    txInfoSignatories :: [PubKeyHash] => Signatures provided with the transaction,
                                                                         attested that they all signed the tx
                                    txInfoData :: [(DatumHash, Datum)]
                                    txInfoId :: TxId  Hash of the pending transaction (excluding witnesses)
                                    
  2)ScriptContextPurpose ::ScriptPurpose :- Purpose of the script that is currently running:-
                                          Minting CurrencySymbol,
                                          Spending TxOutRef,
                                          Rewarding StakingCredential,
                                          Certifying DCert

## Handling Time
We want to be able to express validation logic that says that a certain transaction is only valid 
after a certain time has been reached or before a certain time has been reached. 

type POSIXTimeRange = Interval POSIXTime
An Interval of POSIXTimes.

Where Interval is:- have Constructors => ivFrom :: LowerBound a ->The lower bound of an interval. &
                                         ivTo :: UpperBound a -> The upper bound of an interval.
                    Where Lower Bound is: have Constructors => LowerBound (Extended a) Closure
                                        Where Closure is:  Whether a bound is inclusive or not.
                                        Where Extended is: A set extended with a positive and negative infinity.

* Some useful functions for defining bounds:
1) after :- Check if a value is later than the end of a Interval.
2) before :- Check if a value is earlier than the beginning of an Interval.
3) isEmpty :- Check if an Interval is empty.
4) hull :- 'hull a b' is the smallest interval containing a and b.
5) intersection :- 'intersection a b' is the largest interval that is contained in a and in b, if it exists.
6) overlaps :- Check whether two intervals overlap, that is, whether there is a value that is a member of both intervals.
7) member :- Check whether a value is in an interval.
8) never :- An Interval that is empty.
9) always :- An Interval that covers every slot.
10) to :- to a is an Interval that includes all values that are smaller than or equal to a.
11) from :- from a is an Interval that includes all values that are greater than or equal to a.
12) singleton :- 
13) interval :- interval a b includes all values that are greater than or equal to a and smaller than or equal to b. 
14) upperBound
15) lowerBound
16) strictLowerBound
17) strictUpperBound

## Vesting Contract
 Imagine you want to make a gift of ADA to a child. You want the child to own the ADA, 
 however you only want the child to have access to the ADA when he or she gets to a specified age.
 
 the datum being passed with two pieces of information; the beneficiary and the deadline:
 
 on-chain part
 1) We defined the datum as dat and context as ctx. 
 2) We then check the correct beneficiary by creating the signedByBeneficiary function 
    and the deadline by the deadlineReached function on mkvalidator.
 3) Followed by the boilerplate code for the validator, hash, and address:
 
 in off-chain part
 give function
 => mustPayToTheScript datum or ()
 => submitTxConstraints typedValidator tx
 grab function
 => isSuitable function chackes if pkh=benficary and deadline reached
 => Constraints.otherScript validator
 
 ## Parameterized Contract
 we will be passing a parameter instead of a datum.
 1) added addtional input for mkvalidator function
 2) Modifying the compilation:-($$(PlutusTx.compile [|| mkValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode p)
 3) Followed by the boilerplate code for the validator, hash, and address:
 
 Followed by the off-chain code:
 give function
 => mustPayToTheScript datum or ()
 => submitTxConstraints (typedValidator p) tx
 grab function
 => take deadline as argument and check it with now
 => Constraints.otherScript (validator p)
 
 
 Homework Part 1
 -- This should validate if either beneficiary1 has signed the transaction and
 the current slot is before or at the deadline
 -- or if beneficiary2 has signed the transaction and the deadline has passed.
 
 We check both conditions, one where the beneficiary1 signs and 
 it is before or at the deadline, and also where beneficiary2 signs and
 it is after the deadline. Otherwise all else returns false.
 
 Homework Part 2
 The second part of the homework, we need to write the validator function for 
 the vesting contract in which we instead pass pubkeyhash as the parameter, and POSIXTime as the datum.


 
