## Monads

Functor IO class.

>>fmap (map toUpper) getLine 

(>>) Operator:
>> putStrLn "Hello" >> putStrLn "World"
Output:
Hello
World

(>>=) Bind Operator:
(>>=) :: Monad m => m a -> (a -> m b) -> m b
main :: IO ()
main = bar -- putStrLn "Hello, world!"
bar :: IO ()
bar = getLine >>= \s ->
      getLine >>= \t ->
      putStrLn (s ++ t)
--run the code
*Main Data.Char> bar
<user input> one
<user input> two
Output:
onetwo


## Maybe Type:
Inside the Maybe.hs file, we first look at the foo function:
foo :: String -> String -> String -> Maybe Int
foo x y z = case readMaybe x of
   Nothing -> Nothing
   Just k  -> case readMaybe y of
       Nothing -> Nothing
       Just l  -> case readMaybe z of
           Nothing -> Nothing
           Just m  -> Just (k + l + m)    
Example outputs of the foo function:
Prelude Week04.Maybe> foo "1" "2" "3"
Output:
Just 6
Prelude Week04.Maybe> foo "" "2" "3"
Output:
Nothing
Prelude Week04.Maybe> foo "1" "2" ""
Output:
Nothing


Now we look at bindMaybe in Maybe.hs(to create a more concise version of the foo function called foo’ ):
>>readMaybe "42" :: Maybe Int
>>readMaybe "42+x" :: Maybe Int
bindMaybe :: Maybe a -> (a -> Maybe b) -> Maybe b
bindMaybe Nothing  _ = Nothing
bindMaybe (Just x) f = f x
foo' :: String -> String -> String -> Maybe Int
foo' x y z = readMaybe x `bindMaybe` \k ->
            readMaybe y `bindMaybe` \l ->
            readMaybe z `bindMaybe` \m ->
            Just (k + l + m)
same out put like the above code

## Either Type:
Prelude Week04.Maybe> Left "Haskell" :: Either String Int
Output:
Left "Haskell"
Prelude Week04.Maybe> Right 7 :: Either String Int
Output:
Right 7
Inside Either.hs, we first look at the readEither function:
readEither :: Read a => String -> Either String a
readEither s = case readMaybe s of
   Nothing -> Left $ "can't parse: " ++ s
   Just a  -> Right a
Example outputs of readEither:
Prelude Week04.Either> readEither "42" :: Either String Int
Output:
42
Prelude Week04.Either> readEither "42+x" :: Either String Int
Output:
Left "can't parse: 42+x"

We then look at the foo function:
readEither :: Read a => String -> Either String a
readEither s = case readMaybe s of
   Nothing -> Left $ "can't parse: " ++ s
   Just a  -> Right a
foo :: String -> String -> String -> Either String Int
foo x y z = case readEither x of
   Left err -> Left err
   Right k  -> case readEither y of
       Left err -> Left err
       Right l  -> case readEither z of
           Left err -> Left err
           Right m  -> Right (k + l + m)
Example outputs of foo:
Prelude Week04.Either> foo "1" "2" "3"
Output:
Right 6
Prelude Week04.Either> foo "" "2" "3"
Output:
Left "can't parse: "

We then look at foo’ (more concise version of foo):
bindEither :: Either String a -> (a -> Either String b) -> Either String b
bindEither (Left err) _ = Left err
bindEither (Right x)  f = f x
foo' :: String -> String -> String -> Either String Int
foo' x y z = readEither x `bindEither` \k ->
            readEither y `bindEither` \l ->
            readEither z `bindEither` \m ->
            Right (k + l + m)
 same output like above code
 
Finally, we load the Writer.hs file:
The first function of interest in the file is number:
  number :: Int -> Writer Int
  number n = Writer n $ ["number: " ++ show n]
Prelude Week04.Writer> number 42
Output:
Writer 42 ["number: 42"]

Now we look at foo:
foo :: Writer Int -> Writer Int -> Writer Int -> Writer Int
foo (Writer k xs) (Writer l ys) (Writer m zs) =
 let
   s = k + l + m
   Writer _ us = tell ["sum: " ++ show s]
 in
   Writer s $ xs ++ ys ++ zs ++ us
Example of foo:
Prelude Week04.Writer> foo (number 1) (number 2) (number 3)
Output:
Writer 6 ["number: 1","number: 2","number: 3","sum: 6"]

Now we look at the bindWriter function with foo’:
bindWriter :: Writer a -> (a -> Writer b) -> Writer b
bindWriter (Writer a xs) f =
 let
   Writer b ys = f a
 in
   Writer b $ xs ++ ys
foo' :: Writer Int -> Writer Int -> Writer Int -> Writer Int
foo' x y z = x `bindWriter` \k ->
            y `bindWriter` \l ->
            z `bindWriter` \m ->
            let s = k + l + m
            in tell ["sum: " ++ show s] `bindWriter` \_ ->
               Writer s []
same output like the above code 

Lastly, we looked at the entire Monad Class:
Monad
(>>=) :: Monad m => m a -> (a -> m b) -> m b
(=<<) :: Monad m => (a -> m b) -> m a -> m b
(>>) :: Monad m => m a -> m b -> m b
return :: Monad m => a -> m a

## The Emulator Trace Monad
